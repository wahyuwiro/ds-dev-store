<script src = "https://code.jquery.com/jquery-3.6.4.min.js"></script> 
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

{{ 'dsStyle.css' | asset_url | stylesheet_tag }}
{% assign icon_close = 'icon-close' | append: '.liquid' %}
{% include 'dsSnippet' %}

{%- unless template == 'index' or template == 'cart' or template == 'list-collections' or template == '404' -%}
{%- assign t = template | split: '.' | first -%}
<div class="page-width">
    <nav class="breadcrumbs" role="navigation" aria-label="breadcrumbs">
        <ol class="breadcrumbs__list">
            <li class="breadcrumbs__item">
                <a class="breadcrumbs__link" href="/">Home</a>
            </li>
            <li class="breadcrumbs__item">
                <a class="breadcrumbs__link" href="{{ page.url }}" aria-current="page">{{ page.title }}</a>
            </li>
        </ol>
    </nav>
    <div class="detail-content">
        <div class="collection-hero__text-wrapper">
            <h1 class="collection-hero__title">Shared Wishlist</h1>
        </div>
    </div>
    {% comment %} <div class="swiper-container">
        <div class="swiper-wrapper">
            <div class="swiper-slide">Slide 1</div>
            <div class="swiper-slide">Slide 2</div>
            <div class="swiper-slide">Slide 3</div>
            <!-- Add more slides as needed -->
        </div>
        <!-- Add Pagination -->
        <div class="swiper-pagination"></div>
        <!-- Add Navigation -->
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
    </div> {% endcomment %}
</div>
<script>
    var swiper = new Swiper('.swiper-container', {
        slidesPerView: 1,
        spaceBetween: 10,
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
    });
    jQuery(document).ready(async function($) {
        const userId = `{{ customer.id }}`;
        const store = `https://{{ shop.domain }}`;
        let wishlistDetail, productDetail, comments, simplified 

        const loadComment = async(wishlistDetail) => {
            const commentsCount = wishlistDetail.comments.length > 0 ? wishlistDetail.comments.length : 0;
            let dc = document.createElement('DIV');
            dc.classList.add('comment', 'mt-5');
            dc.innerHTML = `<div class="flex justify-between w-full">
                <div class="flex comments-count">
                    <p class="font-bold">Comments (${commentsCount})</p>
                </div>
                <div class="flex justify-end gap-8 flex-wrap align-center icon">
                    <div class="flex flex-wrap align-center btn-chevron cursor-pointer open-expand">
                        ${icons.chevronDown}
                    </div>
                    <div class="flex flex-wrap align-center cursor-pointer expand-comment">
                        ${icons.expand}
                    </div>
                </div>
            </div>

            <div id="list-comment">
            </div>
            
            <div class="flex justify-between w-full gap-8">
                <div class="flex">
                    <div class="bullet rounded-full">
                        <div class="text-center w-full">
                            <span class="text-center w-full">${getInitials(`{{ customer.first_name }} {{ customer.last_name }}`)}</span>
                        </div>
                    </div>
                </div>
                <div class="flex w-full">
                    <div class="input-group w-full">
                        <textarea id="wishlistComment" placeholder="Enter your comment here..." required class="w-full" ></textarea>
                        <div class="submit-comment">
                            <button disabled id="submitComment" type="button">POST</button>
                        </div>
                    </div>                            
                </div>
            </div>
            <div class="mt-5">
                <span class="font-bold">*Enter </span>to Send 
                <span class="font-bold">Shift + Enter</span> to Add a New Line 
            </div>
            `
            $('.detail-content').append(dc);

            handlelistComment(true, true, comments, false);
        }

        const params = new URLSearchParams(window.location.search);
        if (params.has('id')) {
            const rl = await renderLoader();
            $(".detail-content").append(rl);

            const w = await getWishlist(userId, store, params.get('id'))
            if(w && w.success) {
                wishlistDetail = w?.data?.items[0];
                simplified = w?.simplified;
                comments = wishlistDetail.comments.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

                let div = document.createElement('DIV');
                div.classList.add('description', 'flex', 'justify-between', 'w-full');
                div.innerHTML =`<p><a href="mailto:${wishlistDetail?.createdBy.email}">${wishlistDetail?.createdBy.email}</a> has shared ${wishlistDetail?.name} (${wishlistDetail?.products.length} items) with you.</p>`
                $('.detail-content').append(div);

            }
            if(userId === "") {
                openLoginModal();
                const urlSearchParams = new URLSearchParams(window.location.search);
                const queryParams = Object.fromEntries(urlSearchParams.entries());
                setLocalStorage("shareLink",queryParams)
            }
        }

        if (params.has('id') && params.get('product_id')) {
            productDetail = wishlistDetail?.products.find(e => e._id === params.get('product_id'));
            console.log("productDetail =>",{
                product_id: params.get('product_id'),
                productDetail: productDetail,
                wishlistDetail: wishlistDetail,
            })
            if(productDetail && productDetail.productId) {
                const product = await getProductById(productDetail.productId);
                if(product) {
                    console.log("product =>",product)
                    $(".detail-content").find('.render-loader').remove()
                    const p = {
                        ...product, 
                        priceCurrency: productDetail.productPriceCurrency,
                        capsule: productDetail.capsule.name,
                    }
                    const rpd = await renderProductDetail(p)
                    if(rpd) {
                        $(".detail-content").find('.render-loader').remove()
                        $(".detail-content").append(rpd)
                    }
                }
                loadComment(wishlistDetail);
            }

        }else if (params.has('id')) {
            $(".detail-content").find('.render-loader').remove()
            console.log("wishlistDetail =>",simplified[0])
            if(wishlistDetail) {
                let div = document.createElement('DIV');
                div.classList.add('btn', 'btn-add-to-cart', 'addtocart', 'bg-black', 'text-white');
                div.innerHTML =`<div class="bag flex">${icons.shoppingBag}</div> ADD ALL TO CART`
                $('.detail-content .description').append(div);
                const groupedData = groupByProperty(simplified[0].products, 'capsule');
                const capsuleData = Object.keys(groupedData);
                let idx = 0;
                for (const category in groupedData) {
                    if (Object.hasOwnProperty.call(groupedData, category)) {
                        idx++;
                        const d = document.createElement('DIV');
                        d.classList.add('bar');
                        d.innerHTML = category;
                        $('.detail-content').append(d);
            
                        const wrap = $(`
                            <div class="wishlist-content">
                                <div id="wrap-dtl-${idx}" class="flex flex-wrap mx-auto gap-6 mt-5 mb-5"></div>
                            </div>`
                        );
            
                        groupedData[category].forEach((product) => {
                            const item = $(`
                                <div class="flex item mb-4">
                                    <div class="wishlist-item bg-white shadow-md flex flex-col w-full h-full justify-center mb-0" data-id="${product._id}" data-product-id="${product.productId}">
                                        <div class="p-3">
                                            <div class="flex justify-between pb-3 w-full mb-auto">
                                                <div class="btn-close remove-product cursor-pointer ml-auto">
                                                    {% include icon_close %}
                                                </div>
                                            </div>
                                    
                                            <div class="flex gap-4 my-auto">
                                                <img src="${product.productImage}"
                                                    class="w-full h-full object-cover mb-4">
                                            </div>
                                            <div class="mt-8">
                                                <p class="p-0 m-0 view">${product.productName}</p>
                                                <p class="p-0 m-0 view">${product.productPriceCurrency !== "" ? product.productPriceCurrency : product.productPrice}</p>
                                            </div>
                                        </div>
                                        <div class="select-size">
                                            <p class="">SELECT SIZE</p>
                                        </div>                                    
                                    </div>
                                </div>
                            `);
            
                            wrap.find(`#wrap-dtl-${idx}`).append(item);
                        });
            
                        $('.detail-content').append(wrap);
                    }
                }
                loadComment(wishlistDetail);    
            }
        }

        if(userId !== "") {
            const detailContent = $('.page-width').find('.detail-content');
            $('.detail-content').on('input', '#wishlistComment', function () {
                const comment = $(this).val().trim();
                $('.detail-content').find('#submitComment').prop('disabled', comment.length >= 1 ? false : true);
            });
            $('.detail-content').find('#submitComment').on('click', async function () {
                const comments =$('.detail-content').find('#wishlistComment').val();
                $(".detail-content #submitComment").css({display: "none"})
                loader = await renderLoader('0');
                $(".detail-content .submit-comment").append(loader);
                const result = await addComment({comments: comments, wishlistId: params.get('id')});
                if(result?.success) {
                    setTimeout(() => {
                        console.log("result :",result )

                        const comments = result?.data.comments;
                        let lastComment = null
                        //if (comments.length > 0) lastComment = comments[comments.length - 1];
                        if (comments && comments.length > 0) lastComment = comments[comments.length - 1];
                        console.log("lastComment =>",lastComment)

                        detailContent.find(".submit-comment .render-loader").remove()
                        detailContent.find("#submitComment").css({display: ""})
                        detailContent.find('#submitComment').prop('disabled', true);
                        detailContent.find("#wishlistComment").val("");

                        const commentsCount = comments.length > 0 ? comments.length : 0
                        detailContent.find('.comments-count P').text(`Comments (${ commentsCount })`);

                        const newComment = renderComment(lastComment);
                        detailContent.find("#list-comment").append(newComment);

                    }, 3000);
                }
            });

            detailContent.find('.btn-chevron').on('click', function () {
                console.log("Wkwkwkw")
                const classExpand = $(this).attr('class');
                let isOpen = true
                if (classExpand.includes('open-expand')) {
                    // If "open" class exists, remove it
                    $(this).removeClass('open-expand');
                    isOpen = false
                } else {
                    // If "open" class does not exist, add it
                    $(this).addClass('open-expand');
                }
                
                if(isOpen) detailContent.find(".comment .btn-chevron").addClass('open-expand')
                else detailContent.find(".comment .btn-chevron").removeClass('open-expand')
                console.log("aaa bbb")

                if (detailContent.find('.expand-comment').hasClass('open-expand')) detailContent.find('.expand-comment').click();
                else handlelistComment(true, isOpen, comments, false);

            })

            detailContent.find('.expand-comment').on('click', async function () {
                const classExpand = $(this).attr('class');
                let isOpen = true
                if (classExpand.includes('open-expand')) {
                    // If "open" class exists, remove it
                    $(this).removeClass('open-expand');
                    isOpen = false
                } else {
                    // If "open" class does not exist, add it
                    $(this).addClass('open-expand');
                }

                handlelistComment(false, isOpen, comments, false)
            })

            detailContent.find('.addtocart').off('click')
            detailContent.find('.addtocart').on('click', async (event) => {
                
                await handleWishlistUpdate(wishlistDetail, [], false)
                {% comment %} let message = "Are you sure want to add all item to cart?"
                let divLoader = detailContent.find(".form-actions");
                let isWishlist=true;
                let items = wishlistDetail?.products.map(e => ({
                    id: e.productVariant, quantity: 1
                }));
                let obj = {
                    productImage: wishlistDetail.products[0].productImage,
                    name: wishlistDetail.name
                }

                if (params.has('id') && params.get('product_id')) {
                    const selectedSizeElement = document.querySelector('input[name="size"]:checked');
                    const selectedSizeValue = selectedSizeElement.value;
                    items = [{ id: selectedSizeValue, quantity: 1 }];
                    message = `Are you sure want to add ${productDetail?.productName} to cart?`
                    isWishlist=false;
                    obj = {
                        productImage: productDetail.productImage,
                        name: productDetail?.productName
                    }                    
                }else if (params.has('id')) {
                    divLoader = detailContent.find(".description .addtocart");
                }
                const confirm = createConfirm(message);
                $('body').append(confirm);
                confirm.find("button").on('click', async function (event) {
                    const buttonId = event.target.id;

                    confirm.remove();
                    if (buttonId === 'confirm-yes') {
                        loader = await renderLoader('0px');
                        divLoader.empty();
                        divLoader.append(loader);

                        const atc = await addToCart(items, obj, isWishlist);
                        if(atc && atc.success ) {
                            await new Promise(resolve => setTimeout(resolve, 1000)); // add delay
                            window.location.href = "/cart"
                        }

                    }
                }) {% endcomment %}
            })
        }
       


        
    })
</script>
{%- endunless -%}